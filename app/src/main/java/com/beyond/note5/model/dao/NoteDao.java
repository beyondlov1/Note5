package com.beyond.note5.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beyond.note5.bean.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, String> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(4, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property LastModifyTime = new Property(5, java.util.Date.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property Version = new Property(6, Integer.class, "version", false, "VERSION");
        public final static Property ReadFlag = new Property(7, Integer.class, "readFlag", false, "READ_FLAG");
        public final static Property Priority = new Property(8, Integer.class, "priority", false, "PRIORITY");
    }

    private DaoSession daoSession;


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"TYPE\" TEXT," + // 3: type
                "\"CREATE_TIME\" INTEGER," + // 4: createTime
                "\"LAST_MODIFY_TIME\" INTEGER," + // 5: lastModifyTime
                "\"VERSION\" INTEGER," + // 6: version
                "\"READ_FLAG\" INTEGER," + // 7: readFlag
                "\"PRIORITY\" INTEGER);"); // 8: priority
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime.getTime());
        }
 
        java.util.Date lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(6, lastModifyTime.getTime());
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(7, version);
        }
 
        Integer readFlag = entity.getReadFlag();
        if (readFlag != null) {
            stmt.bindLong(8, readFlag);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(9, priority);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime.getTime());
        }
 
        java.util.Date lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(6, lastModifyTime.getTime());
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(7, version);
        }
 
        Integer readFlag = entity.getReadFlag();
        if (readFlag != null) {
            stmt.bindLong(8, readFlag);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(9, priority);
        }
    }

    @Override
    protected final void attachEntity(Note entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // lastModifyTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // version
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // readFlag
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // priority
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLastModifyTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setVersion(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReadFlag(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPriority(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Note entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
