package com.beyond.note5.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beyond.note5.bean.Reminder;

import com.beyond.note5.bean.Todo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODO".
*/
public class TodoDao extends AbstractDao<Todo, String> {

    public static final String TABLENAME = "TODO";

    /**
     * Properties of entity Todo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReminderId = new Property(1, String.class, "reminderId", false, "REMINDER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property ContentWithoutTime = new Property(4, String.class, "contentWithoutTime", false, "CONTENT_WITHOUT_TIME");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property LastModifyTime = new Property(7, java.util.Date.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property Version = new Property(8, Integer.class, "version", false, "VERSION");
        public final static Property ReadFlag = new Property(9, Integer.class, "readFlag", false, "READ_FLAG");
        public final static Property Priority = new Property(10, Integer.class, "priority", false, "PRIORITY");
        public final static Property Valid = new Property(11, Boolean.class, "valid", false, "VALID");
    }

    private DaoSession daoSession;


    public TodoDao(DaoConfig config) {
        super(config);
    }
    
    public TodoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REMINDER_ID\" TEXT," + // 1: reminderId
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"CONTENT_WITHOUT_TIME\" TEXT," + // 4: contentWithoutTime
                "\"TYPE\" TEXT," + // 5: type
                "\"CREATE_TIME\" INTEGER," + // 6: createTime
                "\"LAST_MODIFY_TIME\" INTEGER," + // 7: lastModifyTime
                "\"VERSION\" INTEGER," + // 8: version
                "\"READ_FLAG\" INTEGER," + // 9: readFlag
                "\"PRIORITY\" INTEGER," + // 10: priority
                "\"VALID\" INTEGER);"); // 11: valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Todo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reminderId = entity.getReminderId();
        if (reminderId != null) {
            stmt.bindString(2, reminderId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String contentWithoutTime = entity.getContentWithoutTime();
        if (contentWithoutTime != null) {
            stmt.bindString(5, contentWithoutTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
 
        java.util.Date lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(8, lastModifyTime.getTime());
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(9, version);
        }
 
        Integer readFlag = entity.getReadFlag();
        if (readFlag != null) {
            stmt.bindLong(10, readFlag);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(11, priority);
        }
 
        Boolean valid = entity.getValid();
        if (valid != null) {
            stmt.bindLong(12, valid ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Todo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reminderId = entity.getReminderId();
        if (reminderId != null) {
            stmt.bindString(2, reminderId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String contentWithoutTime = entity.getContentWithoutTime();
        if (contentWithoutTime != null) {
            stmt.bindString(5, contentWithoutTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
 
        java.util.Date lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindLong(8, lastModifyTime.getTime());
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(9, version);
        }
 
        Integer readFlag = entity.getReadFlag();
        if (readFlag != null) {
            stmt.bindLong(10, readFlag);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(11, priority);
        }
 
        Boolean valid = entity.getValid();
        if (valid != null) {
            stmt.bindLong(12, valid ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(Todo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Todo readEntity(Cursor cursor, int offset) {
        Todo entity = new Todo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reminderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contentWithoutTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // lastModifyTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // version
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // readFlag
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // priority
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // valid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Todo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReminderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContentWithoutTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLastModifyTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setReadFlag(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPriority(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setValid(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Todo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Todo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Todo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getReminderDao().getAllColumns());
            builder.append(" FROM TODO T");
            builder.append(" LEFT JOIN REMINDER T0 ON T.\"REMINDER_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Todo loadCurrentDeep(Cursor cursor, boolean lock) {
        Todo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Reminder reminder = loadCurrentOther(daoSession.getReminderDao(), cursor, offset);
        entity.setReminder(reminder);

        return entity;    
    }

    public Todo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Todo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Todo> list = new ArrayList<Todo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Todo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Todo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
