package com.beyond.note5.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beyond.note5.sync.model.entity.SyncLogInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYNC_LOG_INFO".
*/
public class SyncLogInfoDao extends AbstractDao<SyncLogInfo, String> {

    public static final String TABLENAME = "SYNC_LOG_INFO";

    /**
     * Properties of entity SyncLogInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property DocumentId = new Property(1, String.class, "documentId", false, "DOCUMENT_ID");
        public final static Property RefPath = new Property(2, String.class, "refPath", false, "REF_PATH");
        public final static Property RefServer = new Property(3, String.class, "refServer", false, "REF_SERVER");
        public final static Property Operation = new Property(4, String.class, "operation", false, "OPERATION");
        public final static Property OperationTime = new Property(5, java.util.Date.class, "operationTime", false, "OPERATION_TIME");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
    }


    public SyncLogInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SyncLogInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_LOG_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"DOCUMENT_ID\" TEXT," + // 1: documentId
                "\"REF_PATH\" TEXT," + // 2: refPath
                "\"REF_SERVER\" TEXT," + // 3: refServer
                "\"OPERATION\" TEXT," + // 4: operation
                "\"OPERATION_TIME\" INTEGER," + // 5: operationTime
                "\"CREATE_TIME\" INTEGER," + // 6: createTime
                "\"SOURCE\" TEXT," + // 7: source
                "\"TYPE\" TEXT);"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_LOG_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SyncLogInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String documentId = entity.getDocumentId();
        if (documentId != null) {
            stmt.bindString(2, documentId);
        }
 
        String refPath = entity.getRefPath();
        if (refPath != null) {
            stmt.bindString(3, refPath);
        }
 
        String refServer = entity.getRefServer();
        if (refServer != null) {
            stmt.bindString(4, refServer);
        }
 
        String operation = entity.getOperation();
        if (operation != null) {
            stmt.bindString(5, operation);
        }
 
        java.util.Date operationTime = entity.getOperationTime();
        if (operationTime != null) {
            stmt.bindLong(6, operationTime.getTime());
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SyncLogInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String documentId = entity.getDocumentId();
        if (documentId != null) {
            stmt.bindString(2, documentId);
        }
 
        String refPath = entity.getRefPath();
        if (refPath != null) {
            stmt.bindString(3, refPath);
        }
 
        String refServer = entity.getRefServer();
        if (refServer != null) {
            stmt.bindString(4, refServer);
        }
 
        String operation = entity.getOperation();
        if (operation != null) {
            stmt.bindString(5, operation);
        }
 
        java.util.Date operationTime = entity.getOperationTime();
        if (operationTime != null) {
            stmt.bindLong(6, operationTime.getTime());
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SyncLogInfo readEntity(Cursor cursor, int offset) {
        SyncLogInfo entity = new SyncLogInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // documentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // refPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // refServer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // operation
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // operationTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SyncLogInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDocumentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRefPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRefServer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOperation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOperationTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SyncLogInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SyncLogInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SyncLogInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
