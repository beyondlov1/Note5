package com.beyond.note5.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beyond.note5.bean.SyncInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYNC_INFO".
*/
public class SyncInfoDao extends AbstractDao<SyncInfo, String> {

    public static final String TABLENAME = "SYNC_INFO";

    /**
     * Properties of entity SyncInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Node = new Property(1, String.class, "node", false, "NODE");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property LastSyncTime = new Property(3, java.util.Date.class, "lastSyncTime", false, "LAST_SYNC_TIME");
    }


    public SyncInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SyncInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NODE\" TEXT," + // 1: node
                "\"PATH\" TEXT," + // 2: path
                "\"LAST_SYNC_TIME\" INTEGER);"); // 3: lastSyncTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SyncInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(2, node);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        java.util.Date lastSyncTime = entity.getLastSyncTime();
        if (lastSyncTime != null) {
            stmt.bindLong(4, lastSyncTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SyncInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(2, node);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        java.util.Date lastSyncTime = entity.getLastSyncTime();
        if (lastSyncTime != null) {
            stmt.bindLong(4, lastSyncTime.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SyncInfo readEntity(Cursor cursor, int offset) {
        SyncInfo entity = new SyncInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // node
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // lastSyncTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SyncInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastSyncTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SyncInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SyncInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SyncInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
