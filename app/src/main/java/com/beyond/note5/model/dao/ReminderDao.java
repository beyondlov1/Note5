package com.beyond.note5.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beyond.note5.bean.Reminder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMINDER".
*/
public class ReminderDao extends AbstractDao<Reminder, String> {

    public static final String TABLENAME = "REMINDER";

    /**
     * Properties of entity Reminder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CalendarId = new Property(1, Long.class, "calendarId", false, "CALENDAR_ID");
        public final static Property CalendarEventId = new Property(2, Long.class, "calendarEventId", false, "CALENDAR_EVENT_ID");
        public final static Property CalendarReminderId = new Property(3, Long.class, "calendarReminderId", false, "CALENDAR_REMINDER_ID");
        public final static Property Start = new Property(4, java.util.Date.class, "start", false, "START");
        public final static Property End = new Property(5, java.util.Date.class, "end", false, "END");
        public final static Property RepeatMills = new Property(6, Long.class, "repeatMills", false, "REPEAT_MILLS");
    }


    public ReminderDao(DaoConfig config) {
        super(config);
    }
    
    public ReminderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMINDER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CALENDAR_ID\" INTEGER," + // 1: calendarId
                "\"CALENDAR_EVENT_ID\" INTEGER," + // 2: calendarEventId
                "\"CALENDAR_REMINDER_ID\" INTEGER," + // 3: calendarReminderId
                "\"START\" INTEGER," + // 4: start
                "\"END\" INTEGER," + // 5: end
                "\"REPEAT_MILLS\" INTEGER);"); // 6: repeatMills
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMINDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Reminder entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long calendarId = entity.getCalendarId();
        if (calendarId != null) {
            stmt.bindLong(2, calendarId);
        }
 
        Long calendarEventId = entity.getCalendarEventId();
        if (calendarEventId != null) {
            stmt.bindLong(3, calendarEventId);
        }
 
        Long calendarReminderId = entity.getCalendarReminderId();
        if (calendarReminderId != null) {
            stmt.bindLong(4, calendarReminderId);
        }
 
        java.util.Date start = entity.getStart();
        if (start != null) {
            stmt.bindLong(5, start.getTime());
        }
 
        java.util.Date end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(6, end.getTime());
        }
 
        Long repeatMills = entity.getRepeatMills();
        if (repeatMills != null) {
            stmt.bindLong(7, repeatMills);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Reminder entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long calendarId = entity.getCalendarId();
        if (calendarId != null) {
            stmt.bindLong(2, calendarId);
        }
 
        Long calendarEventId = entity.getCalendarEventId();
        if (calendarEventId != null) {
            stmt.bindLong(3, calendarEventId);
        }
 
        Long calendarReminderId = entity.getCalendarReminderId();
        if (calendarReminderId != null) {
            stmt.bindLong(4, calendarReminderId);
        }
 
        java.util.Date start = entity.getStart();
        if (start != null) {
            stmt.bindLong(5, start.getTime());
        }
 
        java.util.Date end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(6, end.getTime());
        }
 
        Long repeatMills = entity.getRepeatMills();
        if (repeatMills != null) {
            stmt.bindLong(7, repeatMills);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Reminder readEntity(Cursor cursor, int offset) {
        Reminder entity = new Reminder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // calendarId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // calendarEventId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // calendarReminderId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // start
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // end
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // repeatMills
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Reminder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCalendarId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCalendarEventId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCalendarReminderId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStart(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEnd(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setRepeatMills(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Reminder entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Reminder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Reminder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
