package com.beyond.note5.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beyond.note5.sync.context.entity.SyncState;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYNC_STATE".
*/
public class SyncStateDao extends AbstractDao<SyncState, String> {

    public static final String TABLENAME = "SYNC_STATE";

    /**
     * Properties of entity SyncState.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property DocumentId = new Property(1, String.class, "documentId", false, "DOCUMENT_ID");
        public final static Property Local = new Property(2, String.class, "local", false, "LOCAL");
        public final static Property Server = new Property(3, String.class, "server", false, "SERVER");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property State = new Property(5, Integer.class, "state", false, "STATE");
    }


    public SyncStateDao(DaoConfig config) {
        super(config);
    }
    
    public SyncStateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNC_STATE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"DOCUMENT_ID\" TEXT," + // 1: documentId
                "\"LOCAL\" TEXT," + // 2: local
                "\"SERVER\" TEXT," + // 3: server
                "\"TYPE\" TEXT," + // 4: type
                "\"STATE\" INTEGER);"); // 5: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNC_STATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SyncState entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String documentId = entity.getDocumentId();
        if (documentId != null) {
            stmt.bindString(2, documentId);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(3, local);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(4, server);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(6, state);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SyncState entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String documentId = entity.getDocumentId();
        if (documentId != null) {
            stmt.bindString(2, documentId);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(3, local);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(4, server);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(6, state);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SyncState readEntity(Cursor cursor, int offset) {
        SyncState entity = new SyncState( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // documentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // local
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // server
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SyncState entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDocumentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SyncState entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SyncState entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SyncState entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
